local image_defs = {}

function getimagedefs()

    for line in io.lines(arg[1]) do
        if line:match("^image%s") then
            local words = {}
            for word in line:gmatch("%S+") do
                table.insert(words, word)
            end

            local second_word = words[2]
            local third_word = words[3]

            local quoted_strings = {}
            local table_index = 1
            for str in line:gmatch('"([^"]*)"') do
                quoted_strings[table_index] = str
                table_index = table_index + 1
            end

            image_defs = {}
            image_defs[1] = second_word
            image_defs[2] = third_word
            image_defs[3] = quoted_strings[1]
            image_defs[4] = quoted_strings[2]
            image_defs[5] = quoted_strings[3]

            if image_defs[1] and image_defs[2] == nil then
            print(image_defs[1])
            outputfile:write("\n-- unhandled " .. image_defs[1])
            elseif image_defs[2] and image_defs[3] == nil then
            print(image_defs[1] .. " " .. image_defs[2])
            outputfile:write("\n-- unhandled " .. image_defs[1] .. " " .. image_defs[2])
            elseif image_defs[3] and image_defs[4] == nil then
            print(image_defs[1] .. " " .. image_defs[2] .. " " .. image_defs[3])
            outputfile:write("\nimage_" .. image_defs[1] .. '["' .. image_defs[2] .. '"] = {"' .. image_defs[3] .. '"}')
            elseif image_defs[4] and image_defs[5] == nil then
            print(image_defs[1] .. " " .. image_defs[2] .. " " .. image_defs[3] .. " " .. image_defs[4])
            outputfile:write("\nimage_" .. image_defs[1] .. '["' .. image_defs[2] .. '"] = {"' .. image_defs[3] .. '", "' .. image_defs[4] .. '"}')
            elseif image_defs[5] then
            print(image_defs[1] .. " " .. image_defs[2] .. " " .. image_defs[3] .. " " .. image_defs[4] .. " " .. image_defs[5])
            outputfile:write("\nimage_" .. image_defs[1] .. '["' .. image_defs[2] .. '"] = {"' .. image_defs[3] .. '", "' .. image_defs[4] .. '", "' .. image_defs[5] .. '"}')
            end
            --[[
            if second_word and third_word then
            print(second_word .. " " .. third_word)
            end]]
        end
    end

end

outputfile = io.open("image_definitions2.lua", "w")
outputfile:write("-- auto-generated by def_convert.lua with help from Copilot and Autopawn")
outputfile:write("\nimage_sayori = {}\nimage_natsuki = {}\nimage_yuri = {}\nimage_monika = {}\nimage_bg = {}\n")
-- singular arrays for compiler pleasing
outputfile:write("\nimage_splash = {}\nimage_white = {}\nimage_darkred = {}\nimage_dark = {}\nimage_black = {}\n")
-- more
outputfile:write("\nimage_n_blackeyes = {}\nimage_n_eye = {}")


getimagedefs()


--[[ Example logging
for _, def in ipairs(image_defs) do
    print("Second word:", def.second)
    print("Third word:", def.third)
    for i, q in ipairs(def.quotes) do
        print("Quoted string " .. i .. ":", q)
    end
end
]]